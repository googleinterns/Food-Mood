package com.google.sps.data;

import com.google.maps.model.LatLng;

// Generated by com.google.auto.value.processor.AutoValueProcessor
final class AutoValue_Place extends Place {

  private final String name;

  private final String websiteUrl;

  private final String phone;

  private final float rating;

  private final int priceLevel;

  private final LatLng location;

  private AutoValue_Place(
      String name,
      String websiteUrl,
      String phone,
      float rating,
      int priceLevel,
      LatLng location) {
    this.name = name;
    this.websiteUrl = websiteUrl;
    this.phone = phone;
    this.rating = rating;
    this.priceLevel = priceLevel;
    this.location = location;
  }

  @Override
  public String name() {
    return name;
  }

  @Override
  public String websiteUrl() {
    return websiteUrl;
  }

  @Override
  public String phone() {
    return phone;
  }

  @Override
  public float rating() {
    return rating;
  }

  @Override
  public int priceLevel() {
    return priceLevel;
  }

  @Override
  public LatLng location() {
    return location;
  }

  @Override
  public String toString() {
    return "Place{"
        + "name=" + name + ", "
        + "websiteUrl=" + websiteUrl + ", "
        + "phone=" + phone + ", "
        + "rating=" + rating + ", "
        + "priceLevel=" + priceLevel + ", "
        + "location=" + location
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Place) {
      Place that = (Place) o;
      return this.name.equals(that.name())
          && this.websiteUrl.equals(that.websiteUrl())
          && this.phone.equals(that.phone())
          && Float.floatToIntBits(this.rating) == Float.floatToIntBits(that.rating())
          && this.priceLevel == that.priceLevel()
          && this.location.equals(that.location());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= name.hashCode();
    h$ *= 1000003;
    h$ ^= websiteUrl.hashCode();
    h$ *= 1000003;
    h$ ^= phone.hashCode();
    h$ *= 1000003;
    h$ ^= Float.floatToIntBits(rating);
    h$ *= 1000003;
    h$ ^= priceLevel;
    h$ *= 1000003;
    h$ ^= location.hashCode();
    return h$;
  }

  static final class Builder extends Place.Builder {
    private String name;
    private String websiteUrl;
    private String phone;
    private Float rating;
    private Integer priceLevel;
    private LatLng location;
    Builder() {
    }
    @Override
    public Place.Builder setName(String name) {
      if (name == null) {
        throw new NullPointerException("Null name");
      }
      this.name = name;
      return this;
    }
    @Override
    public Place.Builder setWebsiteUrl(String websiteUrl) {
      if (websiteUrl == null) {
        throw new NullPointerException("Null websiteUrl");
      }
      this.websiteUrl = websiteUrl;
      return this;
    }
    @Override
    public Place.Builder setPhone(String phone) {
      if (phone == null) {
        throw new NullPointerException("Null phone");
      }
      this.phone = phone;
      return this;
    }
    @Override
    public Place.Builder setRating(float rating) {
      this.rating = rating;
      return this;
    }
    @Override
    public Place.Builder setPriceLevel(int priceLevel) {
      this.priceLevel = priceLevel;
      return this;
    }
    @Override
    public Place.Builder setLocation(LatLng location) {
      if (location == null) {
        throw new NullPointerException("Null location");
      }
      this.location = location;
      return this;
    }
    @Override
    Place autoBuild() {
      String missing = "";
      if (this.name == null) {
        missing += " name";
      }
      if (this.websiteUrl == null) {
        missing += " websiteUrl";
      }
      if (this.phone == null) {
        missing += " phone";
      }
      if (this.rating == null) {
        missing += " rating";
      }
      if (this.priceLevel == null) {
        missing += " priceLevel";
      }
      if (this.location == null) {
        missing += " location";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_Place(
          this.name,
          this.websiteUrl,
          this.phone,
          this.rating,
          this.priceLevel,
          this.location);
    }
  }

}
